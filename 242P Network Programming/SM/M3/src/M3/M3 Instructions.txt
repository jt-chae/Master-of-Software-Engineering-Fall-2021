242P Exercise3  ~/IdeaProjects/242P Exercise3
Instructions:

clientside:
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ClientTCP.java localhost
File list from server:
   crossbow.txt
   gems.txt
   M3 Instructions.txt
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ClientTCP.java localhost gems.txt
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ClientTCP.java localhost gems.txt
A file with that name already exists.
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ClientTCP.java localhost M3 Instructions.txt
Usage:  java FileClient <server>
    or  java FileClient <server> <file>
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ClientTCP.java localhost Instructions.txt
File not found on server.
Message from server: ERROR
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ClientTCP.java localhost "M3 Instructions.txt"


serverside:
[Stellas-MacBook-Pro]~/IdeaProjects/242P Exercise3/src >java ServerTCP.java M3
Listening on port 3737
OK    /127.0.0.1 INDEX
OK    /127.0.0.1 INDEX
OK    /127.0.0.1 GET gems.txt
ERROR /127.0.0.1 GET gems.txt java.lang.Exception: Error while transmitting data.
OK    /127.0.0.1 GET Instructions.txt
OK    /127.0.0.1 GET M3 Instructions.txt



For this exercise, you will write a network file server program.
Your program is expected to run on top of the TCP protocol.
The program is a simple file server that makes a collection of files available for transmission to clients.
When the server starts up, it needs to know the name of the directory that contains the collection of files.
This information can be provided as a command-line argument.
You can assume that the directory contains only regular files
(that is, it does not contain any sub-directories).
You can also assume that all the files are text files.

When a client connects to the server, the server first reads a one-line command from the client.

The command can be the string "index".
In this case, the server responds by sending a list of names of all the files that are available on the server.

Or the command can be of the form "get <file>", where <file> is a file name.
The server checks whether the requested file actually exists.
If so, it first sends the word "ok" as a message to the client.
Then it sends the contents of the file and closes the connection.

Otherwise, it sends the word "error" to the client and closes the connection.




